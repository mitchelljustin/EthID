#!/usr/bin/env node
'use strict';
require('localenv');

let debug = require('debug')('ethid:main');
let path = require('path');
let express = require('express');
let hbs = require('express-handlebars');
let session = require('express-session');
let MongoStore = require('connect-mongo')(session);
let bodyParser = require('body-parser');
let ContractManager = require('../lib/ContractManager');
let http = require('http');
let https = require('https');
let fs = require("fs");

let mongoose = require('mongoose');
mongoose.connect(process.env.MONGODB_URI);

let contractManager = new ContractManager('coinbase');

let app = express();

let handlebars = hbs.create({
    extname: '.hbs',
    layoutsDir: path.resolve('www/layouts'),
    partialsDir: path.resolve('www/partials'),
    defaultLayout: 'main',
});
app.engine('.hbs', handlebars.engine);
app.set('views', path.resolve('www/views'));
app.set('view engine', '.hbs');
require('../lib/middleware/handlebarsHelpers')(handlebars.handlebars);

app.set('trust proxy', 1); // trust first proxy

app.use(session({
    key: 'sessions',
    secret: process.env.SESSION_SECRET,
    store: new MongoStore({ mongooseConnection: mongoose.connection }),
    resave: false,
    saveUninitialized: true,
    cookie: {}
}));
app.use(bodyParser.urlencoded({extended: false}));

let router = require('../lib/router');

app.use(express.static(path.resolve('www/public')));
app.use('/bower_components', express.static(path.resolve('www/bower_components')));

app.use(router);

app.use((err, req, res, next) => {
    if (err) {
        res.json({
            message: err.message,
            stack: err.stack,
        });
    } else {
        next();
    }
});

debug(`Starting..`);
contractManager.start((err) => {
    if (err) {
        console.error(err);
        process.exit(1);
    }
    debug(`Started contract manager at ${contractManager.contract.address}`);

    let httpPort = process.env.HTTP_PORT;

    if (process.env.ENABLE_HTTPS === 'true'){
        let httpsPort = process.env.HTTPS_PORT;
        let opts = {
            key: fs.readFileSync(process.env.HTTPS_KEY_FILE, 'utf8'),
            cert: fs.readFileSync(process.env.HTTPS_CERT_FILE, 'utf8'),
        };
        https.createServer(opts, app).listen(httpsPort, () => {
            debug(`Listening for HTTPS on port ${httpsPort}`)
        });
        let redirectApp = express();
        redirectApp.all('*', (req, res) => {
            res.redirect(`https://${req.headers.host}${req.path}`);
        });
        http.createServer(redirectApp).listen(httpPort, () => {
            debug(`Listening for HTTP on port ${httpPort} and redirecting`);
        });
    }
    else {
        http.createServer(app).listen(httpPort, () => {
            debug(`Listening for HTTP on port ${httpPort}`)
        });
    }
});